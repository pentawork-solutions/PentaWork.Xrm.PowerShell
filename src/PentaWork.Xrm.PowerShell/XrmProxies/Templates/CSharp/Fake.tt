<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.Xrm.Sdk.Metadata" #>
<#@ import namespace="PentaWork.Xrm.PowerShell.XrmProxies.Model" #>
using Bogus;
using System;
using FakeXrmEasy;
using System.Collections.Generic;
using <#= ProxyNamespace #>.Entities;

namespace <#= FakeNamespace #>
{
	public static class Fake<#= EntityInfo.UniqueDisplayName #>
	{	
		#region FakeRelationships
		public static class Relationships 
		{
<#		foreach(var relation in EntityInfo.OneToManyRelationList){ #>
			/// <summary>1:N <#= relation.SchemaName #></summary>
			public static readonly XrmFakedRelationship <#= relation.UniqueDisplayName #> = 
				new XrmFakedRelationship
				{
					Entity1Attribute = "<#= EntityInfo.PrimaryIdAttribute.LogicalName #>",
					Entity2Attribute = "<#= relation.RelatedEntityAttributeName #>",
					Entity1LogicalName = "<#= EntityInfo.LogicalName #>",
					Entity2LogicalName = "<#= relation.RelatedEntityInfo.LogicalName #>",
					RelationshipType = XrmFakedRelationship.enmFakeRelationshipType.OneToMany
				};

<#		} #>
<#		foreach(var relation in EntityInfo.ManyToManyRelationList){ #>
			/// <summary>N:N <#= relation.SchemaName #></summary>
			public static readonly XrmFakedRelationship <#= relation.UniqueDisplayName #> = 
				new XrmFakedRelationship
				{
					IntersectEntity = "<#= relation.SchemaName #>",
					Entity1Attribute = "<#= relation.Entity1Attribute #>",
					Entity2Attribute = "<#= relation.Entity2Attribute #>",
					Entity1LogicalName = "<#= relation.Entity1LogicalName #>",
					Entity2LogicalName = "<#= relation.Entity2LogicalName #>",
					RelationshipType = XrmFakedRelationship.enmFakeRelationshipType.ManyToMany
				};

<#		} #>
		}
		#endregion

		#region Fake
		public static <#= EntityInfo.UniqueDisplayName #> Create()
		{
<#		var rules = new List<string>();
		foreach(var attribute in EntityInfo.AttributeList)
		{
			var attType = attribute.AttributeType;
            switch (attType)
            { 				
				case AttributeTypeCode.Double:
					rules.Add($".RuleFor(e => e.{attribute.UniqueDisplayName}, fake => fake.Random.Double())");
                    break;
				case AttributeTypeCode.Decimal:
				case AttributeTypeCode.Money:
					rules.Add($".RuleFor(e => e.{attribute.UniqueDisplayName}, fake => fake.Finance.Amount())");
                    break;
                case AttributeTypeCode.Picklist:
				case AttributeTypeCode.Status:
				case AttributeTypeCode.State:
					rules.Add($".RuleFor(e => e.{attribute.UniqueDisplayName}, fake => fake.PickRandom<{EntityInfo.UniqueDisplayName}.{attribute.ReturnType}>())");
                    break;
				case AttributeTypeCode.Virtual:
					if(attribute.AttributeMetadata is MultiSelectPicklistAttributeMetadata multiSelect)
					{
						rules.Add($".RuleFor(e => e.{attribute.UniqueDisplayName}, fake => new List<{EntityInfo.UniqueDisplayName}.{attribute.ReturnType}> {{ fake.PickRandom<{EntityInfo.UniqueDisplayName}.{attribute.ReturnType}>() }})");
					}
					break;
				case AttributeTypeCode.Integer:
                case AttributeTypeCode.BigInt:
					rules.Add($".RuleFor(e => e.{attribute.UniqueDisplayName}, fake => fake.Random.Int())");
					break;
				case AttributeTypeCode.Uniqueidentifier:
					rules.Add($".RuleFor(e => e.{attribute.UniqueDisplayName}, fake => Guid.NewGuid())");
					break;
				case AttributeTypeCode.Memo:
                case AttributeTypeCode.String:
                case AttributeTypeCode.EntityName:
					rules.Add($".RuleFor(e => e.{attribute.UniqueDisplayName}, fake => fake.Lorem.Word())");
					break;
				case AttributeTypeCode.Boolean:
                    rules.Add($".RuleFor(e => e.{attribute.UniqueDisplayName}, fake => fake.Random.Bool())");
                    break;
                case AttributeTypeCode.DateTime:
                    rules.Add($".RuleFor(e => e.{attribute.UniqueDisplayName}, fake => fake.Date.Soon())");
                    break;
            }
		}#>
			var faker = new Faker<<#= EntityInfo.UniqueDisplayName #>>()
			<#= string.Join($"{Environment.NewLine}\t\t\t", rules.ToArray()) #>;
			return faker.Generate();
		}
		#endregion
	}
}

<#+
public EntityInfo EntityInfo { get; set; }
public string ProxyNamespace { get; set; }
public string FakeNamespace { get; set; }
#>