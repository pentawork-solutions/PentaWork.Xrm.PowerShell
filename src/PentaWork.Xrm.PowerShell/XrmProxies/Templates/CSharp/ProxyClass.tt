<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.Xrm.Sdk.Metadata" #>
<#@ import namespace="PentaWork.Xrm.PowerShell.XrmProxies.Model" #>
using System;
using System.Linq;
using System.Diagnostics;
using System.ComponentModel;
using Microsoft.Xrm.Sdk; 
using Microsoft.Xrm.Sdk.Client;
using System.Collections.Generic;

namespace <#= ProxyNamespace #>.Entities
{
<#	if(EntityInfo.PrimaryNameAttribute != null) { #>
	[DebuggerDisplay("{<#= EntityInfo.PrimaryNameAttribute.UniqueDisplayName #>}")] <# }
#>	
	[EntityLogicalName("<#= EntityInfo.LogicalName #>")]
	public sealed class <#= EntityInfo.UniqueDisplayName #> : <#= UseBaseProxy ? "BaseProxy" : "Entity" #>
	{	
		public static readonly int? EntityTypeCode = <#= EntityInfo.TypeCode #>;
		public new const string LogicalName = "<#= EntityInfo.LogicalName #>";
		public <#= UseBaseProxy ? "new " : "" #>const string PrimaryIdAttribute = "<#= EntityInfo.PrimaryIdAttribute.LogicalName #>";
		public <#= UseBaseProxy ? "new " : "" #>const string PrimaryNameAttribute = "<#= EntityInfo.PrimaryNameAttribute != null ? EntityInfo.PrimaryNameAttribute.LogicalName : string.Empty #>";
	
<#		if(UseBaseProxy)
		{ #>
		public <#= EntityInfo.UniqueDisplayName #>() : base(new Entity("<#= EntityInfo.LogicalName #>")) { }

		public <#= EntityInfo.UniqueDisplayName #>(Entity entity) : base(entity) { }
<#		} else { #>
		public <#= EntityInfo.UniqueDisplayName #>() : base("<#= EntityInfo.LogicalName #>") { }
<#		}#>

		#region Attributes
<#		foreach(var attribute in EntityInfo.AttributeList)
		{
			var attType = attribute.AttributeType;
            switch (attType)
            { 				
				case AttributeTypeCode.Money:
					var moneyMetadata = (MoneyAttributeMetadata) attribute.AttributeMetadata; #>
		/// <summary>
        /// <#= attribute.LogicalName #>
		///
		/// Precision: <#= moneyMetadata.Precision #>
		/// MaxValue: <#= moneyMetadata.MaxValue #>
		/// MinValue: <#= moneyMetadata.MinValue #>
        /// </summary>
		[DisplayName("<#= attribute.AttributeMetadata.DisplayName.GetLabel(attribute.AttributeMetadata.LogicalName) #>")]
		[AttributeLogicalName("<#= attribute.LogicalName #>")]
		public decimal? <#= attribute.UniqueDisplayName #>
		{	
			get { return GetAttributeValue<Money>("<#= attribute.LogicalName #>")?.Value; }
			set 
			{
				Money moneyValue = null;
				if(value != null) 
				{
					var roundedValue = Decimal.Round(value.Value, <#= moneyMetadata.Precision #>);
					moneyValue = new Money(roundedValue);
				}

				if(Attributes.ContainsKey("<#= attribute.LogicalName #>") && moneyValue?.Value == <#= attribute.UniqueDisplayName #>) return;
				<#= UseBaseProxy ? "SetAttributeValueTracked" : "SetAttributeValue" #>("<#= attribute.LogicalName #>", moneyValue);  
			}
		}

<#					break;
				case AttributeTypeCode.Decimal:
					var decimalMetadata = (DecimalAttributeMetadata) attribute.AttributeMetadata; #>
		/// <summary>
        /// <#= attribute.LogicalName #>
		///
		/// Precision: <#= decimalMetadata.Precision #>
		/// MaxValue: <#= decimalMetadata.MaxValue #>
		/// MinValue: <#= decimalMetadata.MinValue #>
        /// </summary>
		[DisplayName("<#= attribute.AttributeMetadata.DisplayName.GetLabel(attribute.AttributeMetadata.LogicalName) #>")]
		[AttributeLogicalName("<#= attribute.LogicalName #>")]
		public decimal? <#= attribute.UniqueDisplayName #>
		{	
			get { return GetAttributeValue<decimal?>("<#= attribute.LogicalName #>"); }
			set 
			{
				decimal? decimalValue = null;
				if(value != null) decimalValue = Decimal.Round(value.Value, <#= decimalMetadata.Precision #>);
				if(Attributes.ContainsKey("<#= attribute.LogicalName #>") && decimalValue == <#= attribute.UniqueDisplayName #>) return;
				<#= UseBaseProxy ? "SetAttributeValueTracked" : "SetAttributeValue" #>("<#= attribute.LogicalName #>", decimalValue);  
			}
		}

<#					break;
				case AttributeTypeCode.Double:
					var doubleMetadata = (DoubleAttributeMetadata) attribute.AttributeMetadata; #>
		/// <summary>
        /// <#= attribute.LogicalName #>
		///
		/// Precision: <#= doubleMetadata.Precision #>
		/// MaxValue: <#= doubleMetadata.MaxValue #>
		/// MinValue: <#= doubleMetadata.MinValue #>
        /// </summary>
		[DisplayName("<#= attribute.AttributeMetadata.DisplayName.GetLabel(attribute.AttributeMetadata.LogicalName) #>")]
		[AttributeLogicalName("<#= attribute.LogicalName #>")]
		public double? <#= attribute.UniqueDisplayName #>
		{	
			get { return GetAttributeValue<double?>("<#= attribute.LogicalName #>"); }
			set 
			{
				double? doubleValue = null;
				if(value != null) doubleValue = Math.Round(value.Value, <#= doubleMetadata.Precision #>);
				if(Attributes.ContainsKey("<#= attribute.LogicalName #>") && doubleValue == <#= attribute.UniqueDisplayName #>) return;
				<#= UseBaseProxy ? "SetAttributeValueTracked" : "SetAttributeValue" #>("<#= attribute.LogicalName #>", doubleValue);  
			}
		}

<#					break;
                case AttributeTypeCode.Picklist:
				case AttributeTypeCode.Status:
				case AttributeTypeCode.State:#>
		/// <summary>
        /// <#= attribute.LogicalName #>
        /// </summary>
		[DisplayName("<#= attribute.AttributeMetadata.DisplayName.GetLabel(attribute.AttributeMetadata.LogicalName) #>")]
		[AttributeLogicalName("<#= attribute.LogicalName #>")]
		public <#= attribute.ReturnType #>? <#= attribute.UniqueDisplayName #>
		{	
			get 
			{ 
				var optionSetValue = GetAttributeValue<OptionSetValue>("<#= attribute.LogicalName #>");
				if (optionSetValue != null) return (<#= attribute.ReturnType #>)optionSetValue.Value;
				else return null;
			}
			set 
			{ 
				if(Attributes.ContainsKey("<#= attribute.LogicalName #>") && value == <#= attribute.UniqueDisplayName #>) return;

				OptionSetValue optionSetValue = null;
				if(value != null) optionSetValue = new OptionSetValue((int)value);
				<#= UseBaseProxy ? "SetAttributeValueTracked" : "SetAttributeValue" #>("<#= attribute.LogicalName #>", optionSetValue); 
			}
		}

<#                  break;
				case AttributeTypeCode.Virtual:
					if(attribute.AttributeMetadata is MultiSelectPicklistAttributeMetadata multiSelect)
					{ #>
		/// <summary>
        /// <#= attribute.LogicalName #>
        /// </summary>
		[DisplayName("<#= attribute.AttributeMetadata.DisplayName.GetLabel(attribute.AttributeMetadata.LogicalName) #>")]
		[AttributeLogicalName("<#= attribute.LogicalName #>")]
		public List<<#= attribute.ReturnType #>> <#= attribute.UniqueDisplayName #>
		{	
			get 
			{ 
				var optionSetCollection = GetAttributeValue<OptionSetValueCollection>("<#= attribute.LogicalName #>");
				if (optionSetCollection != null) return optionSetCollection.Select(o => (<#= attribute.ReturnType #>)o.Value).ToList();
				else return new List<<#= attribute.ReturnType #>>();
			}
			set 
			{ 
				var firstNotSecond = value.Except(<#= attribute.UniqueDisplayName #>).ToList();
				var secondNotFirst = <#= attribute.UniqueDisplayName #>.Except(value).ToList();
				if (!firstNotSecond.Any() && !secondNotFirst.Any()) return;

				<#= UseBaseProxy ? "SetAttributeValueTracked" : "SetAttributeValue" #>("<#= attribute.LogicalName #>", new OptionSetValueCollection(value.Select(v => new OptionSetValue((int)v)).ToList()));
			}
		}
<#					}
					break;
				default: 
					if(attribute.LogicalName == EntityInfo.PrimaryIdAttribute.LogicalName) { #>
		/// <summary>
        /// <#= attribute.LogicalName #>
        /// </summary>
		[DisplayName("<#= attribute.AttributeMetadata.DisplayName.GetLabel(attribute.AttributeMetadata.LogicalName) #>")]
		[AttributeLogicalName("<#= attribute.LogicalName #>")]
		public override Guid Id
		{
			get => base.Id;
			set { base.Id = value; SetAttributeValue("<#= attribute.LogicalName #>", value); }
		}

					<# }  else { #>
		/// <summary>
        /// <#= attribute.LogicalName #>
        /// </summary>
		[DisplayName("<#= attribute.AttributeMetadata.DisplayName.GetLabel(attribute.AttributeMetadata.LogicalName) #>")]
		[AttributeLogicalName("<#= attribute.LogicalName #>")]
		public <#= attribute.ReturnType #> <#= attribute.UniqueDisplayName #>
		{	
			get { return GetAttributeValue<<#= attribute.ReturnType #>>("<#= attribute.LogicalName #>"); }
			set
			{ 
				if(Attributes.ContainsKey("<#= attribute.LogicalName #>") && value == <#= attribute.UniqueDisplayName #>) return;
				<#= UseBaseProxy ? "SetAttributeValueTracked" : "SetAttributeValue" #>("<#= attribute.LogicalName #>", value);
			}
		}	
			
<#              }    
				break;
            }
		}#>
		#endregion	

		#region Relations
	<#		foreach(var relation in EntityInfo.OneToManyRelationList)
		{ 
			var relatedClassInfo = relation.RelatedEntityInfo; #>
		/// <summary>
        /// 1:N Get entities for '<#= relation.SchemaName #>'
        /// </summary>
		[RelationshipSchemaName("<#= relation.SchemaName #>")]
		public IEnumerable<<#= relatedClassInfo.UniqueDisplayName #>> <#= relation.UniqueDisplayName #>
		{
			get { return GetRelatedEntities<<#= relatedClassInfo.UniqueDisplayName #>>("<#= relation.SchemaName #>", null); }
			set { SetRelatedEntities("<#= relation.SchemaName #>", null, value); }
		}
<#		}

		foreach(var relation in EntityInfo.ManyToManyRelationList)
		{ 
			var relatedClassInfo = relation.RelatedEntityInfo; #>
		/// <summary>
        /// N:N Get entities for '<#= relatedClassInfo.UniqueDisplayName #>'
        /// </summary>
		[RelationshipSchemaName("<#= relation.SchemaName #>")]
		public IEnumerable<<#= relation.RelatedEntityInfo.UniqueDisplayName #>> <#= relation.UniqueDisplayName #>
		{
			get { return GetRelatedEntities<<#= relation.RelatedEntityInfo.UniqueDisplayName #>>("<#= relation.SchemaName #>", null); }
			set { SetRelatedEntities("<#= relation.SchemaName #>", null, value); }
		}
<#		} #>
		#endregion

		#region Actions
<#		foreach(var action in EntityInfo.ActionList)
		{ #>
		public OrganizationResponse Execute<#= action.UniqueDisplayName #>(OrganizationServiceContext serviceContext)
		{
			var orgRequest = new OrganizationRequest("<#= action.SdkMessageName #>");
			orgRequest["Target"] = ToEntityReference();
            return serviceContext.Execute(orgRequest);
		}
<#		} #>
		#endregion

		#region OptionSetEnums
<#		foreach(var optionSetInfo in EntityInfo.OptionSetList) {
        var optionSetTemplate = new OptionSet { OptionSetInfo = optionSetInfo }; #>
<#=		optionSetTemplate.TransformText() #>
<#		} #>
		#endregion	

		#region Properties
		public static class Properties 
		{
<#		foreach(var attribute in EntityInfo.AttributeList){ #>
			/// <summary><#= attribute.LogicalName #></summary>
			public const string <#= attribute.UniqueDisplayName #> = "<#= attribute.LogicalName #>";

<#		} #>
		}
		#endregion

		#region Schemas
		public static class Schemas 
		{
<#		foreach(var relation in EntityInfo.OneToManyRelationList){ #>
			/// <summary>1:N <#= relation.SchemaName #></summary>
			public const string <#= relation.UniqueDisplayName #> = "<#= relation.SchemaName #>";

<#		} #>
<#		foreach(var relation in EntityInfo.ManyToManyRelationList){ #>
			/// <summary>N:N <#= relation.SchemaName #></summary>
			public const string <#= relation.UniqueDisplayName #> = "<#= relation.SchemaName #>";

<#		} #>
		}
		#endregion
	}
}

<#+
public EntityInfo EntityInfo { get; set; }
public string ProxyNamespace { get; set; }
public bool UseBaseProxy { get; set; }
#>